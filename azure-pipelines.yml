# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- master
#- dev

strategy:
  matrix:
    linux:
      imageName: 'MMSUbuntu20.04TLS'
    windows:
      imageName: 'MMS2019TLS'

pool:
    name: '1ES-Hosted-AzFunc'
    vmImage: $(imageName)

variables:
  Configuration: Release
  buildNumber: $[ counter('build', 400) ] # Start higher than our AppVeyor versions. Every build (pr or branch) will increment.

steps:
- pwsh: |
    $releaseBranches = @('v4.x/ps7.2', 'v4.x/ps7.0', 'v3.x/ps7', 'v3.x/ps6', 'v2.x')

    Write-Host "BuildSourceBranch: $($env:BuildSourceBranch)"
    $branchName = $env:BuildSourceBranch.Replace("refs/heads/", "")
    Write-Host "BranchName: $branchName"

    $isReleaseBuild = ($releaseBranches -contains $branchName)
    Write-Host "##vso[task.setvariable variable=IsReleaseBuild]$isReleaseBuild"
    Write-Host "IsReleaseBuild: $isReleaseBuild"
  displayName: 'Set IsReleaseBuild variable'
  env:
    BuildSourceBranch: $(Build.SourceBranch)

- pwsh: ./build.ps1 -NoBuild -Bootstrap
  displayName: 'Running ./build.ps1 -NoBuild -Bootstrap'

- pwsh: |
      $ErrorActionPreference = "Stop"
      if ($isReleaseBuild)
      {
        ./build.ps1 -Clean -Configuration Release -BuildNumber "$(buildNumber)" -AddSBOM -SBOMUtilSASUrl $env:SBOMUtilSASUrl
      }
      else
      {
        ./build.ps1 -Clean -Configuration Release -BuildNumber "$(buildNumber)"
      }
  displayName: 'Build worker code'
  env:
    SBOMUtilSASUrl: $(SBOMUtilSASUrl)

- pwsh: ./build.ps1 -NoBuild -Test
  displayName: 'Running UnitTest'

- pwsh: |
    Invoke-WebRequest 'https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.ps1' -OutFile 'dotnet-install.ps1'
    ./dotnet-install.ps1 -InstallDir "$env:ProgramFiles/dotnet" -Version "6.0.100" -Channel 'release'
  displayName: 'Install the .Net version used by the Core Tools for Windows'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- bash: |
    curl -sSL https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh | bash /dev/stdin -v '6.0.100' -c 'release' --install-dir /usr/share/dotnet
  displayName: 'Install the .Net version used by the Core Tools for Linux'
  condition: eq( variables['Agent.OS'], 'Linux' )

- pwsh: ./test/E2E/Start-E2ETest.ps1
  env:
    AzureWebJobsStorage: $(AzureWebJobsStorage)
    AzureWebJobsCosmosDBConnectionString: $(AzureWebJobsCosmosDBConnectionString)
    AzureWebJobsServiceBus: $(AzureWebJobsServiceBus)
    AzureWebJobsEventHubSender: $(AzureWebJobsEventHubSender)
    FUNCTIONS_WORKER_RUNTIME : "powershell"
  displayName: 'Running E2ETest'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()
  displayName: 'Publish tests results'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/package'
    Contents: '**/*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy package to artifacts directory'

- task: NuGetCommand@2
  condition: and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['IsReleaseBuild'], true), eq(variables['UPLOADPACKAGETOPRERELEASEFEED'], false))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'e6a70c92-4128-439f-8012-382fe78d6396/c0493cce-bc63-4e11-9fc9-e7c45291f151'
    allowPackageConflicts: true
  displayName: 'Push NuGet package'

- task: NuGetCommand@2
  condition: eq(variables['UPLOADPACKAGETOPRERELEASEFEED'], 'True')
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'e6a70c92-4128-439f-8012-382fe78d6396/f37f760c-aebd-443e-9714-ce725cd427df'
    allowPackageConflicts: true
  displayName: 'Push NuGet package to the AzureFunctionsPreRelease feed'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish build artifacts'
